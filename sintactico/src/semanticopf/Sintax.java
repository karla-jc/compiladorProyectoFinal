
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 22 11:19:09 COT 2022
//----------------------------------------------------

package semanticopf;

import java_cup.runtime.Symbol;
import java.util.HashMap;
/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 22 11:19:09 COT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\002" +
    "\006\000\002\002\004\000\002\002\007\000\002\002\010" +
    "\000\002\002\006\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\005\000\002\003\004\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\004\000\002" +
    "\003\004\000\002\003\005\000\002\003\005\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\003\000\002\003\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\003\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\004\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\003\004\000\002\003\005\000\002\003\005\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\004\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\004\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\003\000\002\003\004\000\002\003" +
    "\005\000\002\003\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\050\004\012\015\006\016\022\017\025\020" +
    "\024\021\004\023\013\024\011\025\020\026\016\027\027" +
    "\030\010\031\015\032\007\033\014\034\017\035\023\036" +
    "\005\037\026\001\002\000\062\002\uffdf\004\uffdf\005\032" +
    "\006\037\007\035\010\uffdf\015\173\016\022\017\025\020" +
    "\024\021\004\023\013\024\011\025\020\026\016\027\027" +
    "\030\010\031\015\032\007\033\014\034\017\035\023\036" +
    "\005\037\026\001\002\000\062\002\uffd3\004\uffd3\005\032" +
    "\006\037\007\035\010\uffd3\015\167\016\022\017\025\020" +
    "\024\021\004\023\013\024\011\025\020\026\016\027\027" +
    "\030\010\031\015\032\007\033\014\034\017\035\023\036" +
    "\005\037\026\001\002\000\010\005\032\006\037\007\035" +
    "\001\002\000\062\002\uffc7\004\uffc7\005\032\006\037\007" +
    "\035\010\uffc7\015\162\016\022\017\025\020\024\021\004" +
    "\023\013\024\011\025\020\026\016\027\027\030\010\031" +
    "\015\032\007\033\014\034\017\035\023\036\005\037\026" +
    "\001\002\000\062\002\uffb7\004\uffb7\005\032\006\037\007" +
    "\035\010\uffb7\015\155\016\022\017\025\020\024\021\004" +
    "\023\013\024\011\025\020\026\016\027\027\030\010\031" +
    "\015\032\007\033\014\034\017\035\023\036\005\037\026" +
    "\001\002\000\062\002\uffef\004\uffef\005\032\006\037\007" +
    "\035\010\uffef\015\147\016\022\017\025\020\024\021\004" +
    "\023\013\024\011\025\020\026\016\027\027\030\010\031" +
    "\015\032\007\033\014\034\017\035\023\036\005\037\026" +
    "\001\002\000\046\015\006\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\062\002\uffbb\004\uffbb\005\032\006\037" +
    "\007\035\010\uffbb\015\135\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\062\002\uffd7\004\uffd7\005\032\006\037" +
    "\007\035\010\uffd7\015\130\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\062\002\uffea\004\uffea\005\032\006\037" +
    "\007\035\010\uffea\015\124\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\062\002\uffdb\004\uffdb\005\032\006\037" +
    "\007\035\010\uffdb\015\117\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\062\002\uffb3\004\uffb3\005\032\006\037" +
    "\007\035\010\uffb3\015\111\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\062\002\uffcb\004\uffcb\005\032\006\037" +
    "\007\035\010\uffcb\015\104\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\010\002\000\004\074\010\075\001\002" +
    "\000\062\002\uffbf\004\uffbf\005\032\006\037\007\035\010" +
    "\uffbf\015\070\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\062\002\uffe5\004\uffe5\005\032\006\037\007\035\010" +
    "\uffe5\015\062\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\062\002\uffcf\004\uffcf\005\032\006\037\007\035\010" +
    "\uffcf\015\056\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\062\002\ufff3\004\ufff3\005\032\006\037\007\035\010" +
    "\ufff3\015\051\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\062\002\ufffa\004\ufffa\005\032\006\037\007\035\010" +
    "\ufffa\015\043\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\062\002\uffc3\004\uffc3\005\032\006\037\007\035\010" +
    "\uffc3\015\033\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\004\002\031\001\002\000\004\002\001\001\002\000" +
    "\054\002\uffaf\004\uffaf\010\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\001\002\000\054\005\032\006\037\007" +
    "\035\015\006\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\046\015\006\016\022\017\025\020\024\021\004\023" +
    "\013\024\011\025\020\026\016\027\027\030\010\031\015" +
    "\032\007\033\014\034\017\035\023\036\005\037\026\001" +
    "\002\000\054\002\uffae\004\uffae\010\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\001\002\000\010\002\uffc2\004" +
    "\uffc2\010\uffc2\001\002\000\054\002\uffad\004\uffad\010\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\001\002\000" +
    "\010\002\uffc1\004\uffc1\010\uffc1\001\002\000\010\002\ufff4" +
    "\004\ufff4\010\ufff4\001\002\000\010\002\uffc0\004\uffc0\010" +
    "\uffc0\001\002\000\062\002\ufff6\004\ufff6\005\032\006\037" +
    "\007\035\010\ufff6\015\006\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\054\002\ufff9\004\ufff9\010\ufff9\015\006" +
    "\016\022\017\025\020\024\021\004\023\013\024\011\025" +
    "\020\026\016\027\027\030\010\031\015\032\007\033\014" +
    "\034\017\035\023\036\005\037\026\001\002\000\010\002" +
    "\ufff8\004\ufff8\010\ufff8\001\002\000\010\002\ufff7\004\ufff7" +
    "\010\ufff7\001\002\000\010\002\ufff5\004\ufff5\010\ufff5\001" +
    "\002\000\046\015\006\016\022\017\025\020\024\021\004" +
    "\023\013\024\011\025\020\026\016\027\027\030\010\031" +
    "\015\032\007\033\014\034\017\035\023\036\005\037\026" +
    "\001\002\000\054\005\032\006\037\007\035\015\006\016" +
    "\022\017\025\020\024\021\004\023\013\024\011\025\020" +
    "\026\016\027\027\030\010\031\015\032\007\033\014\034" +
    "\017\035\023\036\005\037\026\001\002\000\010\002\ufff2" +
    "\004\ufff2\010\ufff2\001\002\000\010\002\ufff0\004\ufff0\010" +
    "\ufff0\001\002\000\010\002\ufff1\004\ufff1\010\ufff1\001\002" +
    "\000\046\015\006\016\022\017\025\020\024\021\004\023" +
    "\013\024\011\025\020\026\016\027\027\030\010\031\015" +
    "\032\007\033\014\034\017\035\023\036\005\037\026\001" +
    "\002\000\054\005\032\006\037\007\035\015\006\016\022" +
    "\017\025\020\024\021\004\023\013\024\011\025\020\026" +
    "\016\027\027\030\010\031\015\032\007\033\014\034\017" +
    "\035\023\036\005\037\026\001\002\000\010\002\uffce\004" +
    "\uffce\010\uffce\001\002\000\010\002\uffcc\004\uffcc\010\uffcc" +
    "\001\002\000\010\002\uffcd\004\uffcd\010\uffcd\001\002\000" +
    "\062\002\uffe0\004\uffe0\005\032\006\037\007\035\010\uffe0" +
    "\015\006\016\022\017\025\020\024\021\004\023\013\024" +
    "\011\025\020\026\016\027\027\030\010\031\015\032\007" +
    "\033\014\034\017\035\023\036\005\037\026\001\002\000" +
    "\054\002\uffe3\004\uffe3\010\uffe3\015\006\016\022\017\025" +
    "\020\024\021\004\023\013\024\011\025\020\026\016\027" +
    "\027\030\010\031\015\032\007\033\014\034\017\035\023" +
    "\036\005\037\026\001\002\000\010\002\uffe4\004\uffe4\010" +
    "\uffe4\001\002\000\010\002\uffe2\004\uffe2\010\uffe2\001\002" +
    "\000\010\002\uffe1\004\uffe1\010\uffe1\001\002\000\046\015" +
    "\006\016\022\017\025\020\024\021\004\023\013\024\011" +
    "\025\020\026\016\027\027\030\010\031\015\032\007\033" +
    "\014\034\017\035\023\036\005\037\026\001\002\000\054" +
    "\005\032\006\037\007\035\015\006\016\022\017\025\020" +
    "\024\021\004\023\013\024\011\025\020\026\016\027\027" +
    "\030\010\031\015\032\007\033\014\034\017\035\023\036" +
    "\005\037\026\001\002\000\010\002\uffbe\004\uffbe\010\uffbe" +
    "\001\002\000\010\002\uffbc\004\uffbc\010\uffbc\001\002\000" +
    "\010\002\uffbd\004\uffbd\010\uffbd\001\002\000\046\015\006" +
    "\016\022\017\025\020\024\021\004\023\013\024\011\025" +
    "\020\026\016\027\027\030\010\031\015\032\007\033\014" +
    "\034\017\035\023\036\005\037\026\001\002\000\050\002" +
    "\ufffe\015\006\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\004\010\077\001\002\000\004\002\ufffb\001\002\000" +
    "\004\004\101\001\002\000\046\015\006\016\022\017\025" +
    "\020\024\021\004\023\013\024\011\025\020\026\016\027" +
    "\027\030\010\031\015\032\007\033\014\034\017\035\023" +
    "\036\005\037\026\001\002\000\004\010\103\001\002\000" +
    "\004\002\ufffc\001\002\000\054\005\032\006\037\007\035" +
    "\015\006\016\022\017\025\020\024\021\004\023\013\024" +
    "\011\025\020\026\016\027\027\030\010\031\015\032\007" +
    "\033\014\034\017\035\023\036\005\037\026\001\002\000" +
    "\046\015\006\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\010\002\uffca\004\uffca\010\uffca\001\002\000\010\002" +
    "\uffc9\004\uffc9\010\uffc9\001\002\000\010\002\uffc8\004\uffc8" +
    "\010\uffc8\001\002\000\054\005\032\006\037\007\035\015" +
    "\006\016\022\017\025\020\024\021\004\023\013\024\011" +
    "\025\020\026\016\027\027\030\010\031\015\032\007\033" +
    "\014\034\017\035\023\036\005\037\026\001\002\000\046" +
    "\015\006\016\022\017\025\020\024\021\004\023\013\024" +
    "\011\025\020\026\016\027\027\030\010\031\015\032\007" +
    "\033\014\034\017\035\023\036\005\037\026\001\002\000" +
    "\010\002\uffb2\004\uffb2\010\uffb2\001\002\000\010\002\uffb1" +
    "\004\uffb1\010\uffb1\001\002\000\010\002\uffb0\004\uffb0\010" +
    "\uffb0\001\002\000\046\015\006\016\022\017\025\020\024" +
    "\021\004\023\013\024\011\025\020\026\016\027\027\030" +
    "\010\031\015\032\007\033\014\034\017\035\023\036\005" +
    "\037\026\001\002\000\054\005\032\006\037\007\035\015" +
    "\006\016\022\017\025\020\024\021\004\023\013\024\011" +
    "\025\020\026\016\027\027\030\010\031\015\032\007\033" +
    "\014\034\017\035\023\036\005\037\026\001\002\000\010" +
    "\002\uffda\004\uffda\010\uffda\001\002\000\010\002\uffd8\004" +
    "\uffd8\010\uffd8\001\002\000\010\002\uffd9\004\uffd9\010\uffd9" +
    "\001\002\000\054\002\uffe8\004\uffe8\010\uffe8\015\006\016" +
    "\022\017\025\020\024\021\004\023\013\024\011\025\020" +
    "\026\016\027\027\030\010\031\015\032\007\033\014\034" +
    "\017\035\023\036\005\037\026\001\002\000\054\005\032" +
    "\006\037\007\035\015\006\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\010\002\uffe9\004\uffe9\010\uffe9\001\002" +
    "\000\010\002\uffe6\004\uffe6\010\uffe6\001\002\000\010\002" +
    "\uffe7\004\uffe7\010\uffe7\001\002\000\054\005\032\006\037" +
    "\007\035\015\006\016\022\017\025\020\024\021\004\023" +
    "\013\024\011\025\020\026\016\027\027\030\010\031\015" +
    "\032\007\033\014\034\017\035\023\036\005\037\026\001" +
    "\002\000\046\015\006\016\022\017\025\020\024\021\004" +
    "\023\013\024\011\025\020\026\016\027\027\030\010\031" +
    "\015\032\007\033\014\034\017\035\023\036\005\037\026" +
    "\001\002\000\010\002\uffd6\004\uffd6\010\uffd6\001\002\000" +
    "\010\002\uffd5\004\uffd5\010\uffd5\001\002\000\010\002\uffd4" +
    "\004\uffd4\010\uffd4\001\002\000\054\005\032\006\037\007" +
    "\035\015\006\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\046\015\006\016\022\017\025\020\024\021\004\023" +
    "\013\024\011\025\020\026\016\027\027\030\010\031\015" +
    "\032\007\033\014\034\017\035\023\036\005\037\026\001" +
    "\002\000\010\002\uffba\004\uffba\010\uffba\001\002\000\010" +
    "\002\uffb9\004\uffb9\010\uffb9\001\002\000\010\002\uffb8\004" +
    "\uffb8\010\uffb8\001\002\000\004\004\143\001\002\000\050" +
    "\010\145\015\006\016\022\017\025\020\024\021\004\023" +
    "\013\024\011\025\020\026\016\027\027\030\010\031\015" +
    "\032\007\033\014\034\017\035\023\036\005\037\026\001" +
    "\002\000\004\010\146\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffd\001\002\000\054\005\032\006\037\007" +
    "\035\015\006\016\022\017\025\020\024\021\004\023\013" +
    "\024\011\025\020\026\016\027\027\030\010\031\015\032" +
    "\007\033\014\034\017\035\023\036\005\037\026\001\002" +
    "\000\054\002\uffed\004\uffed\010\uffed\015\006\016\022\017" +
    "\025\020\024\021\004\023\013\024\011\025\020\026\016" +
    "\027\027\030\010\031\015\032\007\033\014\034\017\035" +
    "\023\036\005\037\026\001\002\000\010\002\uffee\004\uffee" +
    "\010\uffee\001\002\000\010\002\uffec\004\uffec\010\uffec\001" +
    "\002\000\010\002\uffeb\004\uffeb\010\uffeb\001\002\000\046" +
    "\015\006\016\022\017\025\020\024\021\004\023\013\024" +
    "\011\025\020\026\016\027\027\030\010\031\015\032\007" +
    "\033\014\034\017\035\023\036\005\037\026\001\002\000" +
    "\054\005\032\006\037\007\035\015\006\016\022\017\025" +
    "\020\024\021\004\023\013\024\011\025\020\026\016\027" +
    "\027\030\010\031\015\032\007\033\014\034\017\035\023" +
    "\036\005\037\026\001\002\000\010\002\uffb6\004\uffb6\010" +
    "\uffb6\001\002\000\010\002\uffb4\004\uffb4\010\uffb4\001\002" +
    "\000\010\002\uffb5\004\uffb5\010\uffb5\001\002\000\046\015" +
    "\006\016\022\017\025\020\024\021\004\023\013\024\011" +
    "\025\020\026\016\027\027\030\010\031\015\032\007\033" +
    "\014\034\017\035\023\036\005\037\026\001\002\000\054" +
    "\005\032\006\037\007\035\015\006\016\022\017\025\020" +
    "\024\021\004\023\013\024\011\025\020\026\016\027\027" +
    "\030\010\031\015\032\007\033\014\034\017\035\023\036" +
    "\005\037\026\001\002\000\010\002\uffc6\004\uffc6\010\uffc6" +
    "\001\002\000\010\002\uffc4\004\uffc4\010\uffc4\001\002\000" +
    "\010\002\uffc5\004\uffc5\010\uffc5\001\002\000\046\015\006" +
    "\016\022\017\025\020\024\021\004\023\013\024\011\025" +
    "\020\026\016\027\027\030\010\031\015\032\007\033\014" +
    "\034\017\035\023\036\005\037\026\001\002\000\054\005" +
    "\032\006\037\007\035\015\006\016\022\017\025\020\024" +
    "\021\004\023\013\024\011\025\020\026\016\027\027\030" +
    "\010\031\015\032\007\033\014\034\017\035\023\036\005" +
    "\037\026\001\002\000\010\002\uffd2\004\uffd2\010\uffd2\001" +
    "\002\000\010\002\uffd0\004\uffd0\010\uffd0\001\002\000\010" +
    "\002\uffd1\004\uffd1\010\uffd1\001\002\000\054\005\032\006" +
    "\037\007\035\015\006\016\022\017\025\020\024\021\004" +
    "\023\013\024\011\025\020\026\016\027\027\030\010\031" +
    "\015\032\007\033\014\034\017\035\023\036\005\037\026" +
    "\001\002\000\046\015\006\016\022\017\025\020\024\021" +
    "\004\023\013\024\011\025\020\026\016\027\027\030\010" +
    "\031\015\032\007\033\014\034\017\035\023\036\005\037" +
    "\026\001\002\000\010\002\uffde\004\uffde\010\uffde\001\002" +
    "\000\010\002\uffdd\004\uffdd\010\uffdd\001\002\000\010\002" +
    "\uffdc\004\uffdc\010\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\002\027\003\020\001\001\000\006\003" +
    "\174\004\173\001\001\000\006\003\167\004\165\001\001" +
    "\000\004\004\040\001\001\000\006\003\162\004\160\001" +
    "\001\000\006\003\155\004\153\001\001\000\006\003\150" +
    "\004\147\001\001\000\004\003\141\001\001\000\006\003" +
    "\136\004\135\001\001\000\006\003\131\004\130\001\001" +
    "\000\006\003\124\004\122\001\001\000\006\003\117\004" +
    "\115\001\001\000\006\003\112\004\111\001\001\000\006" +
    "\003\105\004\104\001\001\000\002\001\001\000\006\003" +
    "\070\004\066\001\001\000\006\003\063\004\062\001\001" +
    "\000\006\003\056\004\054\001\001\000\006\003\051\004" +
    "\047\001\001\000\006\003\044\004\043\001\001\000\006" +
    "\003\035\004\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\041\004\040\001\001" +
    "\000\004\003\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\046\004\040\001\001\000" +
    "\004\003\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\053\001\001\000\006\003" +
    "\052\004\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\060\001\001\000\006\003" +
    "\057\004\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\065\004\040\001\001\000" +
    "\004\003\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\072\001\001\000\006\003" +
    "\071\004\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\077\001\001\000\004\003" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\107\004\040\001\001\000\004" +
    "\003\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\114\004\040\001\001\000\004" +
    "\003\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\121\001\001\000\006\003\120" +
    "\004\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\126\001\001\000\006\003\125" +
    "\004\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\133\004\040\001\001\000\004" +
    "\003\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\140\004\040\001\001\000\004" +
    "\003\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\152\004\040\001\001\000\004\003\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\157\001\001\000\006\003\156\004\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\164\001\001\000\006\003\163\004\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\171\001\001\000\006\003\170\004\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\176\004\040\001\001\000\004\003\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error (Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    
    private String terminacion = "";
    private String palabra ="";
    private String corrector = "";
    private Integer tamaño = 0;
    private Integer tipo;
    public HashMap variables = new HashMap();
   

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PUNTUACION ::= Dos_puntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PUNTUACION ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PUNTUACION ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUNTUACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // GRAMATICA ::= PalabraNB Numero GRAMATICA 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANB")) {
        System.out.println("PALABRA CORRECTA -> " + "AMB"+cade1);
    
    }if (cade.equalsIgnoreCase("ENB")) {
        System.out.println("PALABRA CORRECTA -> " + "EMB"+cade1);
    }if (cade.equalsIgnoreCase("ONB")) {
        System.out.println("PALABRA CORRECTA -> " + "OMB"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONB")) {
        System.out.println("PALABRA CORRECTA -> " + "COMB"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANB")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMB"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // GRAMATICA ::= PalabraNB PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANB")) {
        System.out.println("PALABRA CORRECTA -> " + "AMB"+cade1);
    
    }if (cade.equalsIgnoreCase("ENB")) {
        System.out.println("PALABRA CORRECTA -> " + "EMB"+cade1);
    }if (cade.equalsIgnoreCase("ONB")) {
        System.out.println("PALABRA CORRECTA -> " + "OMB"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONB")) {
        System.out.println("PALABRA CORRECTA -> " + "COMB"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANB")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMB"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GRAMATICA ::= PalabraNB GRAMATICA 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANB")) {
        System.out.println("PALABRA CORRECTA -> " + "AMB"+cade1);
    
    }if (cade.equalsIgnoreCase("ENB")) {
        System.out.println("PALABRA CORRECTA -> " + "EMB"+cade1);
    }if (cade.equalsIgnoreCase("ONB")) {
        System.out.println("PALABRA CORRECTA -> " + "OMB"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONB")) {
        System.out.println("PALABRA CORRECTA -> " + "COMB"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANB")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMB"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GRAMATICA ::= PalabraNB 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANB")) {
        System.out.println("PALABRA CORRECTA -> " + "AMB"+cade1);
    
    }if (cade.equalsIgnoreCase("ENB")) {
        System.out.println("PALABRA CORRECTA -> " + "EMB"+cade1);
    }if (cade.equalsIgnoreCase("ONB")) {
        System.out.println("PALABRA CORRECTA -> " + "OMB"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONB")) {
        System.out.println("PALABRA CORRECTA -> " + "COMB"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANB")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMB"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // GRAMATICA ::= PalabraNP Numero GRAMATICA 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANP")) {
        System.out.println("PALABRA CORRECTA -> " + "AMP"+cade1);
    
    }if (cade.equalsIgnoreCase("ENP")) {
        System.out.println("PALABRA CORRECTA -> " + "EMP"+cade1);
    }if (cade.equalsIgnoreCase("INP")) {
        System.out.println("PALABRA CORRECTA -> " + "IMP"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONP")) {
        System.out.println("PALABRA CORRECTA -> " + "COMP"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANP")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LANP")) {
        System.out.println("PALABRA CORRECTA -> " + "LAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LINP")) {
        System.out.println("PALABRA CORRECTA -> " + "LIMP"+cade3);
    }
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // GRAMATICA ::= PalabraNP PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANP")) {
        System.out.println("PALABRA CORRECTA -> " + "AMP"+cade1);
    
    }if (cade.equalsIgnoreCase("ENP")) {
        System.out.println("PALABRA CORRECTA -> " + "EMP"+cade1);
    }if (cade.equalsIgnoreCase("INP")) {
        System.out.println("PALABRA CORRECTA -> " + "IMP"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONP")) {
        System.out.println("PALABRA CORRECTA -> " + "COMP"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANP")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LANP")) {
        System.out.println("PALABRA CORRECTA -> " + "LAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LINP")) {
        System.out.println("PALABRA CORRECTA -> " + "LIMP"+cade3);
    }
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // GRAMATICA ::= PalabraNP GRAMATICA 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANP")) {
        System.out.println("PALABRA CORRECTA -> " + "AMP"+cade1);
    
    }if (cade.equalsIgnoreCase("ENP")) {
        System.out.println("PALABRA CORRECTA -> " + "EMP"+cade1);
    }if (cade.equalsIgnoreCase("INP")) {
        System.out.println("PALABRA CORRECTA -> " + "IMP"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONP")) {
        System.out.println("PALABRA CORRECTA -> " + "COMP"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANP")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LANP")) {
        System.out.println("PALABRA CORRECTA -> " + "LAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LINP")) {
        System.out.println("PALABRA CORRECTA -> " + "LIMP"+cade3);
    }
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // GRAMATICA ::= PalabraNP 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("ANP")) {
        System.out.println("PALABRA CORRECTA -> " + "AMP"+cade1);
    
    }if (cade.equalsIgnoreCase("ENP")) {
        System.out.println("PALABRA CORRECTA -> " + "EMP"+cade1);
    }if (cade.equalsIgnoreCase("INP")) {
        System.out.println("PALABRA CORRECTA -> " + "IMP"+cade1);
    }

    if (cade2.equalsIgnoreCase("CONP")) {
        System.out.println("PALABRA CORRECTA -> " + "COMP"+cade3);
    
    }if (cade2.equalsIgnoreCase("CANP")) {
        System.out.println("PALABRA CORRECTA -> " + "CAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LANP")) {
        System.out.println("PALABRA CORRECTA -> " + "LAMP"+cade3);
    }if (cade2.equalsIgnoreCase("LINP")) {
        System.out.println("PALABRA CORRECTA -> " + "LIMP"+cade3);
    }
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // GRAMATICA ::= PalabraION Numero GRAMATICA 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("CION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"CIÓN");
    }if (cade1.equalsIgnoreCase("SION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"SIÓN");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // GRAMATICA ::= PalabraION PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("CION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"CIÓN");
    }if (cade1.equalsIgnoreCase("SION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"SIÓN");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // GRAMATICA ::= PalabraION GRAMATICA 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("CION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"CIÓN");
    }if (cade1.equalsIgnoreCase("SION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"SIÓN");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // GRAMATICA ::= PalabraION 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("CION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"CIÓN");
    }if (cade1.equalsIgnoreCase("SION")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"SIÓN");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // GRAMATICA ::= PalabraUN Numero GRAMATICA 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("UN")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ÚN");
                //cadenafinal="oposicion";
        }  
    }   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // GRAMATICA ::= PalabraUN PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("UN")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ÚN");
                //cadenafinal="oposicion";
        }  
    }   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // GRAMATICA ::= PalabraUN GRAMATICA 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("UN")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ÚN");
                //cadenafinal="oposicion";
        }  
    }   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GRAMATICA ::= PalabraUN 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("UN")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ÚN");
                //cadenafinal="oposicion";
        }  
    }   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GRAMATICA ::= PalabraMP Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GRAMATICA ::= PalabraMP PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GRAMATICA ::= PalabraMP GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GRAMATICA ::= PalabraMP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GRAMATICA ::= PalabraMB Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GRAMATICA ::= PalabraMB PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // GRAMATICA ::= PalabraMB GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // GRAMATICA ::= PalabraMB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // GRAMATICA ::= PalabracION Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // GRAMATICA ::= PalabracION PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GRAMATICA ::= PalabracION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GRAMATICA ::= PalabracION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // GRAMATICA ::= PalabracUN Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // GRAMATICA ::= PalabracUN PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GRAMATICA ::= PalabracUN GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GRAMATICA ::= PalabracUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GRAMATICA ::= Palabramp Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // GRAMATICA ::= Palabramp PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // GRAMATICA ::= Palabramp GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GRAMATICA ::= Palabramp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // GRAMATICA ::= Palabramb Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // GRAMATICA ::= Palabramb PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // GRAMATICA ::= Palabramb GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // GRAMATICA ::= Palabramb 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // GRAMATICA ::= Palabracion Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // GRAMATICA ::= Palabracion PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // GRAMATICA ::= Palabracion GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // GRAMATICA ::= Palabracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // GRAMATICA ::= Palabracun Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GRAMATICA ::= Palabracun PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GRAMATICA ::= Palabracun GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GRAMATICA ::= Palabracun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GRAMATICA ::= Palabranb Numero 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anb")) {
        System.out.println("PALABRA CORRECTA -> " + "amb"+cade1);
    
    }if (cade.equalsIgnoreCase("enb")) {
        System.out.println("PALABRA CORRECTA -> " + "emb"+cade1);
    }if (cade.equalsIgnoreCase("onb")) {
        System.out.println("PALABRA CORRECTA -> " + "omb"+cade1);
    }

    if (cade2.equalsIgnoreCase("conb")) {
        System.out.println("PALABRA CORRECTA -> " + "comb"+cade3);
    
    }if (cade2.equalsIgnoreCase("canb")) {
        System.out.println("PALABRA CORRECTA -> " + "camb"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GRAMATICA ::= Palabranb Numero GRAMATICA 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anb")) {
        System.out.println("PALABRA CORRECTA -> " + "amb"+cade1);
    
    }if (cade.equalsIgnoreCase("enb")) {
        System.out.println("PALABRA CORRECTA -> " + "emb"+cade1);
    }if (cade.equalsIgnoreCase("onb")) {
        System.out.println("PALABRA CORRECTA -> " + "omb"+cade1);
    }

    if (cade2.equalsIgnoreCase("conb")) {
        System.out.println("PALABRA CORRECTA -> " + "comb"+cade3);
    
    }if (cade2.equalsIgnoreCase("canb")) {
        System.out.println("PALABRA CORRECTA -> " + "camb"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GRAMATICA ::= Palabranb PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anb")) {
        System.out.println("PALABRA CORRECTA -> " + "amb"+cade1);
    
    }if (cade.equalsIgnoreCase("enb")) {
        System.out.println("PALABRA CORRECTA -> " + "emb"+cade1);
    }if (cade.equalsIgnoreCase("onb")) {
        System.out.println("PALABRA CORRECTA -> " + "omb"+cade1);
    }

    if (cade2.equalsIgnoreCase("conb")) {
        System.out.println("PALABRA CORRECTA -> " + "comb"+cade3);
    
    }if (cade2.equalsIgnoreCase("canb")) {
        System.out.println("PALABRA CORRECTA -> " + "camb"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GRAMATICA ::= Palabranb PUNTUACION 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anb")) {
        System.out.println("PALABRA CORRECTA -> " + "amb"+cade1);
    
    }if (cade.equalsIgnoreCase("enb")) {
        System.out.println("PALABRA CORRECTA -> " + "emb"+cade1);
    }if (cade.equalsIgnoreCase("onb")) {
        System.out.println("PALABRA CORRECTA -> " + "omb"+cade1);
    }

    if (cade2.equalsIgnoreCase("conb")) {
        System.out.println("PALABRA CORRECTA -> " + "comb"+cade3);
    
    }if (cade2.equalsIgnoreCase("canb")) {
        System.out.println("PALABRA CORRECTA -> " + "camb"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // GRAMATICA ::= Palabranb GRAMATICA 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    
 
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anb")) {
        System.out.println("PALABRA CORRECTA -> " + "amb"+cade1);
    
    }if (cade.equalsIgnoreCase("enb")) {
        System.out.println("PALABRA CORRECTA -> " + "emb"+cade1);
    }if (cade.equalsIgnoreCase("onb")) {
        System.out.println("PALABRA CORRECTA -> " + "omb"+cade1);
    }

    if (cade2.equalsIgnoreCase("conb")) {
        System.out.println("PALABRA CORRECTA -> " + "comb"+cade3);
    
    }if (cade2.equalsIgnoreCase("canb")) {
        System.out.println("PALABRA CORRECTA -> " + "camb"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GRAMATICA ::= Palabranb 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    terminacion = nb.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anb")) {
        System.out.println("PALABRA CORRECTA -> " + "amb"+cade1);
    
    }if (cade.equalsIgnoreCase("enb")) {
        System.out.println("PALABRA CORRECTA -> " + "emb"+cade1);
    }if (cade.equalsIgnoreCase("onb")) {
        System.out.println("PALABRA CORRECTA -> " + "omb"+cade1);
    }

    if (cade2.equalsIgnoreCase("conb")) {
        System.out.println("PALABRA CORRECTA -> " + "comb"+cade3);
    
    }if (cade2.equalsIgnoreCase("canb")) {
        System.out.println("PALABRA CORRECTA -> " + "camb"+cade3);
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GRAMATICA ::= Palabranp Numero GRAMATICA 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anp")) {
        System.out.println("PALABRA CORRECTA -> " + "amp"+cade1);
    
    }if (cade.equalsIgnoreCase("enp")) {
        System.out.println("PALABRA CORRECTA -> " + "emp"+cade1);
    }if (cade.equalsIgnoreCase("inp")) {
        System.out.println("PALABRA CORRECTA -> " + "imp"+cade1);
    }

    if (cade2.equalsIgnoreCase("conp")) {
        System.out.println("PALABRA CORRECTA -> " + "comp"+cade3);
    
    }if (cade2.equalsIgnoreCase("canp")) {
        System.out.println("PALABRA CORRECTA -> " + "camp"+cade3);
    }if (cade2.equalsIgnoreCase("lanp")) {
        System.out.println("PALABRA CORRECTA -> " + "lamp"+cade3);
    }if (cade2.equalsIgnoreCase("linp")) {
        System.out.println("PALABRA CORRECTA -> " + "linp"+cade3);
    }
    
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GRAMATICA ::= Palabranp PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anp")) {
        System.out.println("PALABRA CORRECTA -> " + "amp"+cade1);
    
    }if (cade.equalsIgnoreCase("enp")) {
        System.out.println("PALABRA CORRECTA -> " + "emp"+cade1);
    }if (cade.equalsIgnoreCase("inp")) {
        System.out.println("PALABRA CORRECTA -> " + "imp"+cade1);
    }

    if (cade2.equalsIgnoreCase("conp")) {
        System.out.println("PALABRA CORRECTA -> " + "comp"+cade3);
    
    }if (cade2.equalsIgnoreCase("canp")) {
        System.out.println("PALABRA CORRECTA -> " + "camp"+cade3);
    }if (cade2.equalsIgnoreCase("lanp")) {
        System.out.println("PALABRA CORRECTA -> " + "lamp"+cade3);
    }if (cade2.equalsIgnoreCase("linp")) {
        System.out.println("PALABRA CORRECTA -> " + "linp"+cade3);
    }
    
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GRAMATICA ::= Palabranp PUNTUACION 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anp")) {
        System.out.println("PALABRA CORRECTA -> " + "amp"+cade1);
    
    }if (cade.equalsIgnoreCase("enp")) {
        System.out.println("PALABRA CORRECTA -> " + "emp"+cade1);
    }if (cade.equalsIgnoreCase("inp")) {
        System.out.println("PALABRA CORRECTA -> " + "imp"+cade1);
    }

    if (cade2.equalsIgnoreCase("conp")) {
        System.out.println("PALABRA CORRECTA -> " + "comp"+cade3);
    
    }if (cade2.equalsIgnoreCase("canp")) {
        System.out.println("PALABRA CORRECTA -> " + "camp"+cade3);
    }if (cade2.equalsIgnoreCase("lanp")) {
        System.out.println("PALABRA CORRECTA -> " + "lamp"+cade3);
    }if (cade2.equalsIgnoreCase("linp")) {
        System.out.println("PALABRA CORRECTA -> " + "linp"+cade3);
    }
    
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GRAMATICA ::= Palabranp GRAMATICA 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anp")) {
        System.out.println("PALABRA CORRECTA -> " + "amp"+cade1);
    
    }if (cade.equalsIgnoreCase("enp")) {
        System.out.println("PALABRA CORRECTA -> " + "emp"+cade1);
    }if (cade.equalsIgnoreCase("inp")) {
        System.out.println("PALABRA CORRECTA -> " + "imp"+cade1);
    }

    if (cade2.equalsIgnoreCase("conp")) {
        System.out.println("PALABRA CORRECTA -> " + "comp"+cade3);
    
    }if (cade2.equalsIgnoreCase("canp")) {
        System.out.println("PALABRA CORRECTA -> " + "camp"+cade3);
    }if (cade2.equalsIgnoreCase("lanp")) {
        System.out.println("PALABRA CORRECTA -> " + "lamp"+cade3);
    }if (cade2.equalsIgnoreCase("linp")) {
        System.out.println("PALABRA CORRECTA -> " + "linp"+cade3);
    }
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GRAMATICA ::= Palabranp 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    terminacion = np.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cade2 = terminacion;
    String cade3 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    Integer x = 3;
    Integer y = 4;
    cade = terminacion.substring(0, x);
    cade1 = terminacion.substring(x, terminacion.length());

    cade2 = terminacion.substring(0, y);
    cade3 = terminacion.substring(y, terminacion.length());
    

    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade.equalsIgnoreCase("anp")) {
        System.out.println("PALABRA CORRECTA -> " + "amp"+cade1);
    
    }if (cade.equalsIgnoreCase("enp")) {
        System.out.println("PALABRA CORRECTA -> " + "emp"+cade1);
    }if (cade.equalsIgnoreCase("inp")) {
        System.out.println("PALABRA CORRECTA -> " + "imp"+cade1);
    }

    if (cade2.equalsIgnoreCase("conp")) {
        System.out.println("PALABRA CORRECTA -> " + "comp"+cade3);
    
    }if (cade2.equalsIgnoreCase("canp")) {
        System.out.println("PALABRA CORRECTA -> " + "camp"+cade3);
    }if (cade2.equalsIgnoreCase("lanp")) {
        System.out.println("PALABRA CORRECTA -> " + "lamp"+cade3);
    }if (cade2.equalsIgnoreCase("linp")) {
        System.out.println("PALABRA CORRECTA -> " + "linp"+cade3);
    }
    

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GRAMATICA ::= Palabraion Numero GRAMATICA 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("cion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"ción");
    }if (cade1.equalsIgnoreCase("sion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"sión");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GRAMATICA ::= Palabraion PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("cion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"ción");
    }if (cade1.equalsIgnoreCase("sion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"sión");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GRAMATICA ::= Palabraion PUNTUACION 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("cion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"ción");
    }if (cade1.equalsIgnoreCase("sion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"sión");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GRAMATICA ::= Palabraion GRAMATICA 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("cion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"ción");
    }if (cade1.equalsIgnoreCase("sion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"sión");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GRAMATICA ::= Palabraion 
            {
              Object RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    terminacion = ion.toString();
    String cade = terminacion;
    String cade1 = terminacion;
    String cadenafinal="";
    tamaño = terminacion.length();
    cade = terminacion.substring(0, terminacion.length()-4);
    cade1 = terminacion.substring(terminacion.length()-4);
    
    System.out.println("PALABRA INCORRECTA -> "+cade+cade1);
    if (cade1.equalsIgnoreCase("cion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"ción");
    }if (cade1.equalsIgnoreCase("sion")) {
        System.out.println("PALABRA CORRECTA -> " +cade+"sión");
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GRAMATICA ::= Palabraun Numero GRAMATICA 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("un")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ún");
                //cadenafinal="oposicion";
        }  
    } 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GRAMATICA ::= Palabraun PUNTUACION GRAMATICA 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("un")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ún");
                //cadenafinal="oposicion";
        }  
    } 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GRAMATICA ::= Palabraun GRAMATICA 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("un")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ún");
                //cadenafinal="oposicion";
        }  
    } 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GRAMATICA ::= Palabraun 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    terminacion = un.toString();
    String cadeun = terminacion;
    String cadeun2 = terminacion;
    tamaño = terminacion.length();
    cadeun = terminacion.substring(0, terminacion.length()-2);
    cadeun2 = terminacion.substring(terminacion.length()-2);

    if(terminacion.length()>2){
        System.out.println("PALABRA INCORRECTA -> "+cadeun+cadeun2);
        if (cadeun2.equalsIgnoreCase("un")) {
            System.out.println("PALABRA CORRECTA -> " +cadeun+"ún");
                //cadenafinal="oposicion";
        }  
    }   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GRAMATICA ::= Numero PUNTUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GRAMATICA ::= Palabra2 Numero GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GRAMATICA ::= Palabra2 Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GRAMATICA ::= Palabra2 PUNTUACION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GRAMATICA ::= Palabra2 GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GRAMATICA ::= Palabra2 PUNTUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GRAMATICA ::= Palabra2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= GRAMATICA Punto GRAMATICA Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= GRAMATICA Comillas GRAMATICA Comillas GRAMATICA Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Comillas GRAMATICA Comillas GRAMATICA Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= GRAMATICA Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Comillas GRAMATICA Comillas Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

